#!/usr/bin/env python3

import subprocess
import curses
import sys

class Pdfpres(object):
    def __init__(self, window, path):
        self.window = window
        self.path = path
        self.previews = []
        self.projector = None
        self.projector_blank = False
        self.page = 1
        self.num_pages = None
        self.notes = []

    def read_pdf_meta(self):
        p = subprocess.Popen(['pdfinfo', self.path], stdout=subprocess.PIPE)
        (stdoutdata, _) = p.communicate()
        lines = str(stdoutdata, 'UTF-8').split('\n')
        for i in lines:
            fields = [f.strip() for f in i.split(':')]
            if fields[0] == 'Pages':
                self.num_pages = int(fields[1])

    def launch_preview_range(self, a, b):
        for offset in range(a, b + 1, 1):
            self.launch_preview(a, b, offset)

    def launch_preview(self, a, b, offset):
        iname = '{0}_{1}_{2}'.format(a, b, offset)
        self.previews.append( (self.run_showpdf(iname), offset) )

    def launch_projector(self):
        self.projector = self.run_showpdf('projector')

    def run_showpdf(self, instance_name):
        p = subprocess.Popen([
                                'showpdf',
                                '--name',
                                instance_name,
                                self.path
                             ],
                             bufsize=0, stdin=subprocess.PIPE)
        return p

    def read_notes(self):
        p = subprocess.Popen([
                                'pdfpres_notes',
                                '{0}.notes'.format(self.path),
                                '{0}'.format(self.page)
                             ],
                             stdout=subprocess.PIPE)
        (stdoutdata, _) = p.communicate()
        self.notes = str(stdoutdata, 'UTF-8').split('\n')

    def show_current_info(self):
        self.window.erase()
        (height, width) = self.window.getmaxyx()

        self.window.addstr(0, 2, '--> {0} <--'.format(self.page))

        line_number = 2
        for line in self.notes:
            self.window.addstr(line_number, 0, line)
            line_number += 1
            if line_number == height:
                break

    def navigate_current(self):
        if self.projector_blank:
            self.projector.stdin.write(bytes('go_page -1\n', 'UTF-8'))
        else:
            self.projector.stdin.write(bytes('go_page {0}\n'.format(self.page),
                                             'UTF-8'))
        for (p, offset) in self.previews:
            p.stdin.write(bytes('go_page {0}\n'.format(self.page + offset),
                                'UTF-8'))

        self.read_notes()

    def next_slide(self):
        if self.page < self.num_pages:
            self.page += 1
            self.navigate_current()

    def prev_slide(self):
        if self.page > 1:
            self.page -= 1
            self.navigate_current()

    def end_children(self):
        self.projector.kill()
        for (p, _) in self.previews:
            p.kill()

    def interaction_loop(self):
        while True:
            self.show_current_info()
            c = self.window.getch()

            if c == ord('j'):
                self.next_slide()
            elif c == ord('k'):
                self.prev_slide()
            elif c == ord('b'):
                self.projector_blank = not self.projector_blank
                self.navigate_current()
            elif c == ord('q'):
                self.end_children()
                return


def application(window, path):
    p = Pdfpres(window, path)
    p.read_pdf_meta()
    p.launch_preview_range(-1, 1)
    p.launch_projector()
    p.navigate_current()
    p.interaction_loop()


if __name__ == '__main__':
    try:
        curses.wrapper(application, sys.argv[1])
    except KeyboardInterrupt:
        pass


# vim: set tw=80 ts=4 sw=4 et sta :
